// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?   @map("hashed_password")
  image         String?
  accounts      Account[]
  sessions      Session[]
  balance       Float     @default(0)
  coordinates   String?
  points        Int       @default(0)
  creditScore   Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.String
  accessToken       String? @map("access_token") @db.String
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.String
  sessionState      String? @map("session_state")


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @map("_id") @db.ObjectId
  identifier String   @unique
  token      String   @unique
  expires    DateTime

  @@map("verificationtokens")
}

model Owner {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  idCardNumber String     @unique
  city         String
  address      String
  phoneNumber  String
  email        String     @unique
  bankName     String
  accountNumber String
  balance      Int?
  password     String     @map("hashed_password")
  Merchant     Merchant[]
}

model Merchant {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String  @map("owner_id") @db.ObjectId
  name        String?
  postalCode  String?
  coordinates String?
  benchmark   String?
  owner       Owner   @relation(fields: [ownerId], references: [id])
}

model Driver {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  idCardNumber    String  @unique
  city            String
  address         String
  phoneNumber     String
  email           String  @unique
  licenseNumber   String
  vehicle         String
  productionYear  String
  balance         Float?
  isActive        Boolean @default(false)
  coordinates     String?
  dailyIncome     Float?     @default(0)
  distanceCovered Float?     @default(0)
  dailyTarget     Int     @default(20)
  password        String  @map("hashed_password")
  orders          Order[] 
}

model Order {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  driverId        String  @map("owner_id") @db.ObjectId
  userId          String  @map("user_id") @db.ObjectId
  customerName    String
  source          String 
  destination     String
  distance        Float
  status          OrderStatus @default(PENDING)
  creditScore     Float
  menuOrder       String[]
  eta             Int
  isAccepted      Boolean @default(false)
  isCompleted     Boolean @default(false)
  fee             Float?
  driver          Driver   @relation(fields: [driverId], references: [id])
}

enum OrderStatus {
  PENDING
  ACCEPTED
  COMPLETED
}

